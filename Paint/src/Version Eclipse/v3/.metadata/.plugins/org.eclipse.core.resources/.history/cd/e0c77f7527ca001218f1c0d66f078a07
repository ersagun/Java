import java.awt.*;
import java.awt.event.*;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.BufferedInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Scanner;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Fenetre extends JFrame {

	private Color c = Color.blue;
	private Color c_texte = Color.black;
	private DessinFigure DF = new DessinFigure();
	private DessinFigure DFT = new DessinFigure();
	FigureColoree figure = null;
	String style = "Arial Narrow";
	JPanel principale;
	String phrase = "";
	int taille = 16;

	public Fenetre(String titre, int largeur, int hauteur) {
		super(titre);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setPreferredSize(new Dimension(largeur, hauteur));

		JMenuBar bar = new JMenuBar();
		JMenu File = new JMenu("File");
		JMenuItem nouveau = new JMenuItem("Nouveau ");
		JMenuItem ouvrir = new JMenuItem("Ouvrir ");
		JMenuItem sauvgarder = new JMenuItem("Sauvgarder ");
		File.add(nouveau);
		File.add(ouvrir);
		File.add(sauvgarder);
		bar.add(File);
		this.setJMenuBar(bar);
		JMenu About = new JMenu("About");
		bar.add(About);
		JMenuItem des = new JMenuItem("About");
		About.add(des);

		// Action listener de Menu about
		des.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JOptionPane.showMessageDialog(Fenetre.this,
						" Ersagun \n YALCINTEPE\n S2C");
			}
		});

		// Action listener de menu ouvrir
		ouvrir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent f) {
				JFileChooser chooser = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter(
						"Fichier format .dfg", "dfg");
				chooser.setFileFilter(filter);
				int returnVal = chooser.showOpenDialog(Fenetre.this);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					ObjectInputStream ois;
					try {
						ois = new ObjectInputStream(
								new BufferedInputStream(new FileInputStream(
										(chooser.getSelectedFile()))));
						principale.remove(DF);
						DF = (DessinFigure) ois.readObject();
						principale.add(DF);
						repaint();
						ois.close();
					} catch (FileNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (ClassNotFoundException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		});

		// Action listener de menu nouveau
		nouveau.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent k) {
				DF.nettoyer();
				DF.repaint();
			}
		});

		// Action listener de menu sauvgarder
		sauvgarder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser chooserSave = new JFileChooser();
				FileNameExtensionFilter filt = new FileNameExtensionFilter(
						"Fichier format .dfg", "dfg");
				chooserSave.setFileFilter(filt);
				int returnVall = chooserSave.showSaveDialog(Fenetre.this);
				if (returnVall == JFileChooser.APPROVE_OPTION) {
					ObjectOutputStream oos;
					try {
						oos = new ObjectOutputStream(new BufferedOutputStream(
								new FileOutputStream((chooserSave
										.getSelectedFile()))));
						oos.writeObject(DF);
						oos.close();
					} catch (FileNotFoundException h) {
						// TODO Auto-generated catch block
						h.printStackTrace();
					} catch (IOException h) {
						// TODO Auto-generated catch block
						h.printStackTrace();
					}
				}
			}
		});

		principale = new JPanel();
		principale.setLayout(new BorderLayout());
		PanneauChoix pc = new PanneauChoix();
		principale.add(pc, BorderLayout.NORTH);
		principale.add(DF, BorderLayout.CENTER);
		this.setContentPane(principale);
		this.pack();
		this.setVisible(true);

	}

	public class PanneauChoix extends JPanel{

		// Panneau choix qui contient les boutons
		public PanneauChoix() {

			ButtonGroup bg = new ButtonGroup();
			final JRadioButton rb1 = new JRadioButton("Nouvelle Figure");
			final JRadioButton rb2 = new JRadioButton("Dessin à main levée");
			final JRadioButton rb3 = new JRadioButton("Manipulations");
			final JRadioButton rb4 = new JRadioButton("Mot à afficher : ");
			final JComboBox cboxFigure = new JComboBox(new String[] { "Cercle",
					"Rectangle", "Triangle", "Quadrilatère" });
			cboxFigure.setEnabled(false);
			bg.add(rb1);
			bg.add(rb2);
			bg.add(rb3);
			bg.add(rb4);

			// Declaration du bouton pour changer la couleur
			final JButton jbc = new JButton((new ImageIcon(
					"C:/Users/Ersagun/Desktop/v3/eee.jpg")));
			jbc.setEnabled(false);
			// Permet de changer la couleur avec le panel de couleur de java

			jbc.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					c = JColorChooser.showDialog(null, "Choisissez la couleur",
							c);
					if (figure != null) {
						DF.figureSelectioner().changeCouleur(c);
						jbc.setBackground(c);
					}
					DF.repaint();
				}
			});

			cboxFigure.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();

					switch (cboxFigure.getSelectedIndex()) {
					case 0:
						figure = new UnCercle();
						figure.couleur = c;
						DF.construit(figure);
						break;
					case 1:
						figure = new UnRectangle();
						figure.couleur = c;
						DF.construit(figure);
						break;
					case 2:
						figure = new Triangle();
						figure.couleur = c;
						DF.construit(figure);
						break;
					case 3:
						figure = new Quadrilatere();
						figure.couleur = c;
						DF.construit(figure);
						break;

					}

					if (figure != null)
						figure.couleur = c;
						DF.construit(figure);
				}

			});

			// Action listener de radio button construire figure
			rb1.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();
					jbc.setEnabled(true);
					cboxFigure.setEnabled(true);
					if (figure == null){
						figure = new UnCercle();
						figure.couleur = c;
						DF.construit(figure);
					}
					
				}
			});

			// Action listener de radio button qui trace manuel
			rb2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();
					jbc.setEnabled(false);
					c = JColorChooser.showDialog(null, "Choisissez la couleur",
							c);
					DF.trace(c);
				}
			});

			rb3.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();

					DF.activeModificationsSouris();
				}
			});

			// Declaration du bouton : Nettoyer
			final JButton jb = new JButton("Nettoyer");
			jb.setIcon(new ImageIcon("C:/Users/Ersagun/Desktop/v3/images.jpg"));
			// Permet de réinitialiser la fenêtre de dessin à son état initial
			jb.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.nettoyer();
					DF.repaint();
				}
			});

			// Declaration du bouton d'entrée de texte
			final JTextField text = new JTextField("");
			text.setColumns(10);
			text.setEnabled(false);

			// Declaration du menu déroulant permattant de choisir le style de
			// la police
			final JComboBox jcb4 = new JComboBox(new String[] { "Arial Narrow",
					"Comic Sans MS", "Courier New", "Georgia",
					"Times New Roman", " Verdana" });
			jcb4.addItemListener(new ItemListener() {
				public void itemStateChanged(ItemEvent e) {
					if (e.getStateChange() == ItemEvent.SELECTED) {
						switch (jcb4.getSelectedIndex()) {
						case 0:
							style = "Arial Narrow";
							break;
						case 1:
							style = "Comic Sans MS";
							break;
						case 2:
							style = "Courier New";
							break;
						case 3:
							style = "Georgia";
							break;
						case 4:
							style = "Time New Roman";
							break;
						case 5:
							style = "Verdana";
						}

					}
				}
			});

			jcb4.setEnabled(false);

			SpinnerNumberModel model = new SpinnerNumberModel(16, 4, 72, 1);
			final JSpinner js = new JSpinner(model);
			js.setEnabled(false);

			// Declaration du bouton Ecrire
			final JButton jb2 = new JButton("Ecrire");
			jb2.setEnabled(false);
			// Permet d'actionner l'ecriture du mot avec la taille et la police
			// correspondante à chaque clique
			jb2.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();
					phrase = text.getText();
					taille = ((Integer) js.getValue()).intValue();
					DF.ecrireTexte(taille, style, phrase, c_texte);
					DF.repaint();
					cboxFigure.setEnabled(true);
					jb2.setEnabled(false);
					rb1.setEnabled(true);
					rb2.setEnabled(true);
					rb3.setEnabled(true);
					jcb4.setEnabled(false);
					js.setEnabled(false);
					jbc.setEnabled(false);
				}
			});

			// Action listener de radio button mot a afficher
			rb4.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					DF.supprimerListener();
					DFT.supprimerListener();
					Fenetre.this.add(DFT,BorderLayout.CENTER);
					c_texte = JColorChooser.showDialog(null,
							"Choisissez la couleur", c_texte);
					jb2.setEnabled(true);
					text.setEnabled(true);
					cboxFigure.setEnabled(false);
					jcb4.setEnabled(true);
					js.setEnabled(true);
					jbc.setEnabled(false);
					repaint();
				}
			});

			JPanel haut = new JPanel();
			JPanel bas = new JPanel();
			JPanel plusbas = new JPanel();
			haut.add(rb1);
			haut.add(rb2);
			haut.add(rb3);
			bas.add(cboxFigure);
			bas.add(jb);
			bas.add(jbc);
			plusbas.add(rb4);
			plusbas.add(text);
			plusbas.add(jb2);
			plusbas.add(jcb4);

			this.setLayout(new GridLayout(3, 1));
			this.add(haut);
			this.add(bas);
			this.add(plusbas);
		}
	}
}
